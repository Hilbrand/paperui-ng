[
    {
        "parameters": [],
        "parameterGroups": [],
        "label": "Signal Strength",
        "category": "QualityOfService",
        "itemType": "Number",
        "kind": "STATE",
        "stateDescription": {
            "minimum": 0,
            "maximum": 4,
            "step": 1,
            "readOnly": true,
            "options": [
                {
                    "value": "0",
                    "label": "no signal"
                },
                {
                    "value": "1",
                    "label": "weak"
                },
                {
                    "value": "2",
                    "label": "average"
                },
                {
                    "value": "3",
                    "label": "good"
                },
                {
                    "value": "4",
                    "label": "excellent"
                }
            ]
        },
        "tags": [],
        "UID": "system:signal-strength",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "label": "Low Battery",
        "category": "Battery",
        "itemType": "Switch",
        "kind": "STATE",
        "stateDescription": {
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:low-battery",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "label": "Battery Level",
        "category": "Battery",
        "itemType": "Number",
        "kind": "STATE",
        "stateDescription": {
            "minimum": 0,
            "maximum": 100,
            "step": 1,
            "pattern": "%.0f %%",
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:battery-level",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "label": "Trigger",
        "kind": "TRIGGER",
        "tags": [],
        "UID": "system:trigger",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "label": "Raw button",
        "kind": "TRIGGER",
        "tags": [],
        "UID": "system:rawbutton",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "label": "Button",
        "kind": "TRIGGER",
        "tags": [],
        "UID": "system:button",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "label": "Raw rocker button",
        "kind": "TRIGGER",
        "tags": [],
        "UID": "system:rawrocker",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Device is operable when channel has state ON",
        "label": "Power",
        "itemType": "Switch",
        "kind": "STATE",
        "tags": [],
        "UID": "system:power",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Location in lat./lon./height coordinates",
        "label": "Location",
        "itemType": "Location",
        "kind": "STATE",
        "stateDescription": {
            "pattern": "%2$s°N %3$s°E %1$sm",
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:location",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Motion detected by the device",
        "label": "Motion",
        "category": "Motion",
        "itemType": "Switch",
        "kind": "STATE",
        "stateDescription": {
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:motion",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Controls the brightness and switches the light on and off",
        "label": "Brightness",
        "category": "DimmableLight",
        "itemType": "Dimmer",
        "kind": "STATE",
        "stateDescription": {
            "minimum": 0,
            "maximum": 100,
            "pattern": "%d %%",
            "readOnly": false,
            "options": []
        },
        "tags": [],
        "UID": "system:brightness",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Controls the color of the light",
        "label": "Color",
        "category": "ColorLight",
        "itemType": "Color",
        "kind": "STATE",
        "tags": [],
        "UID": "system:color",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Controls the color temperature of the light",
        "label": "Color Temperature",
        "category": "ColorLight",
        "itemType": "Dimmer",
        "kind": "STATE",
        "stateDescription": {
            "minimum": 0,
            "maximum": 100,
            "pattern": "%d",
            "readOnly": false,
            "options": []
        },
        "tags": [],
        "UID": "system:color-temperature",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Change the sound volume of a device",
        "label": "Volume",
        "category": "SoundVolume",
        "itemType": "Dimmer",
        "kind": "STATE",
        "stateDescription": {
            "minimum": 0,
            "maximum": 100,
            "pattern": "%d %%",
            "readOnly": false,
            "options": []
        },
        "tags": [],
        "UID": "system:volume",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Mute audio of the device",
        "label": "Mute",
        "category": "SoundVolume",
        "itemType": "Switch",
        "kind": "STATE",
        "tags": [],
        "UID": "system:mute",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "label": "Media Control",
        "category": "MediaControl",
        "itemType": "Player",
        "kind": "STATE",
        "tags": [],
        "UID": "system:media-control",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Title of a (played) media file",
        "label": "Media Title",
        "itemType": "String",
        "kind": "STATE",
        "stateDescription": {
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:media-title",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Artist of a (played) media file",
        "label": "Media Artist",
        "itemType": "String",
        "kind": "STATE",
        "stateDescription": {
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:media-artist",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Current wind direction expressed as an angle",
        "label": "Wind Direction",
        "category": "Wind",
        "itemType": "Number:Angle",
        "kind": "STATE",
        "stateDescription": {
            "minimum": 0,
            "maximum": 360,
            "pattern": "%.0f %unit%",
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:wind-direction",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Current wind speed",
        "label": "Wind Speed",
        "category": "Wind",
        "itemType": "Number:Speed",
        "kind": "STATE",
        "stateDescription": {
            "pattern": "%.1f %unit%",
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:wind-speed",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Current outdoor temperature",
        "label": "Outdoor Temperature",
        "category": "Temperature",
        "itemType": "Number:Temperature",
        "kind": "STATE",
        "stateDescription": {
            "pattern": "%.1f %unit%",
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:outdoor-temperature",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Current atmospheric relative humidity",
        "label": "Atmospheric Humidity",
        "category": "Humidity",
        "itemType": "Number:Dimensionless",
        "kind": "STATE",
        "stateDescription": {
            "pattern": "%.0f %%",
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:atmospheric-humidity",
        "advanced": false
    },
    {
        "parameters": [],
        "parameterGroups": [],
        "description": "Current barometric pressure",
        "label": "Barometric Pressure",
        "category": "Pressure",
        "itemType": "Number:Pressure",
        "kind": "STATE",
        "stateDescription": {
            "pattern": "%.3f %unit%",
            "readOnly": true,
            "options": []
        },
        "tags": [],
        "UID": "system:barometric-pressure",
        "advanced": false
    },
    {
        "parameters": [
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the thing will be state-less then.",
                "label": "MQTT state topic",
                "name": "stateTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will send a command to. This can be left empty",
                "label": "MQTT command topic",
                "name": "commandTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "Any supported transformation can be used. An example for a received JSON from a MQTT state topic would be a pattern of JSONPATH:$.device.status.temperature for a json {device: {status: { temperature: 23.2 }}}.",
                "label": "Transformation pattern",
                "name": "transformationPattern",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "If your MQTT topic is limited to a set of one or more specific commands or specific states, define those states here. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                "label": "Allowed states",
                "name": "allowedStates",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            }
        ],
        "parameterGroups": [],
        "label": "Text value",
        "itemType": "String",
        "kind": "STATE",
        "tags": [],
        "UID": "mqtt:String",
        "advanced": false
    },
    {
        "parameters": [
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the thing will be state-less then.",
                "label": "MQTT state topic",
                "name": "stateTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will send a command to. This can be left empty",
                "label": "MQTT command topic",
                "name": "commandTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "Any supported transformation can be used. An example for a received JSON from a MQTT state topic would be a pattern of JSONPATH:$.device.status.temperature for a json {device: {status: { temperature: 23.2 }}}.",
                "label": "Transformation pattern",
                "name": "transformationPattern",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "10.0",
                "description": "The step value is used if the value channel is bound to a Dimmer item and an increase/decrease is issued",
                "label": "Step value",
                "name": "step",
                "required": false,
                "type": "DECIMAL",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "false",
                "description": "Set to true if the MQTT topic expects a float/double decimal instead of an integer value",
                "label": "Is Decimal?",
                "name": "isfloat",
                "required": false,
                "type": "BOOLEAN",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            }
        ],
        "parameterGroups": [],
        "label": "Number value",
        "itemType": "Number",
        "kind": "STATE",
        "tags": [],
        "UID": "mqtt:Number",
        "advanced": false
    },
    {
        "parameters": [
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the thing will be state-less then.",
                "label": "MQTT state topic",
                "name": "stateTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will send a command to. This can be left empty",
                "label": "MQTT command topic",
                "name": "commandTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "Any supported transformation can be used. An example for a received JSON from a MQTT state topic would be a pattern of JSONPATH:$.device.status.temperature for a json {device: {status: { temperature: 23.2 }}}.",
                "label": "Transformation pattern",
                "name": "transformationPattern",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "0.0",
                "description": "Minimum value to convert the MQTT state to a percentage",
                "label": "Minimum value",
                "name": "min",
                "required": false,
                "type": "DECIMAL",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "100.0",
                "description": "Maximum value to convert the MQTT state to a percentage",
                "label": "Maximum value",
                "name": "max",
                "required": false,
                "type": "DECIMAL",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "10.0",
                "description": "The step value is used if the value channel is bound to a Dimmer item and an increase/decrease is issued",
                "label": "Step value",
                "name": "step",
                "required": false,
                "type": "DECIMAL",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "false",
                "description": "Set to true if the MQTT topic expects a float/double decimal instead of an integer value",
                "label": "Is Decimal?",
                "name": "isfloat",
                "required": false,
                "type": "BOOLEAN",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            }
        ],
        "parameterGroups": [],
        "label": "Percentage value",
        "itemType": "Dimmer",
        "kind": "STATE",
        "tags": [],
        "UID": "mqtt:Dimmer",
        "advanced": false
    },
    {
        "parameters": [
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the thing will be state-less then.",
                "label": "MQTT state topic",
                "name": "stateTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will send a command to.",
                "label": "MQTT command topic",
                "name": "commandTopic",
                "required": true,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "Any supported transformation can be used. An example for a received JSON from a MQTT state topic would be a pattern of JSONPATH:$.device.status.temperature for a json {device: {status: { temperature: 23.2 }}}.",
                "label": "Transformation pattern",
                "name": "transformationPattern",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "0",
                "description": "A number (like 1, 10) or a string (like ON) that is recognised as on state.",
                "label": "ON value",
                "name": "on",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "1",
                "description": "A number (like 0, -10) or a string (like OFF) that is recognised as off state.",
                "label": "OFF value",
                "name": "off",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "false",
                "description": "Inverse the meaning. A received \"ON\" will switch the thing channel off and vice versa.",
                "label": "Inverse",
                "name": "inverse",
                "required": false,
                "type": "BOOLEAN",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            }
        ],
        "parameterGroups": [],
        "label": "On/Off switch",
        "itemType": "Switch",
        "kind": "STATE",
        "tags": [],
        "UID": "mqtt:Switch",
        "advanced": false
    },
    {
        "parameters": [
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the thing will be state-less then.",
                "label": "MQTT state topic",
                "name": "stateTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will send a command to.",
                "label": "MQTT command topic",
                "name": "commandTopic",
                "required": true,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "Any supported transformation can be used. An example for a received JSON from a MQTT state topic would be a pattern of JSONPATH:$.device.status.temperature for a json {device: {status: { temperature: 23.2 }}}.",
                "label": "Transformation pattern",
                "name": "transformationPattern",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "ON,DIMMED,OFF",
                "description": "List all valid states. Separate multiple states with commas. An example for a light bulb state set: ON,DIMMED,OFF",
                "label": "Allowed states",
                "name": "allowedStates",
                "required": true,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            }
        ],
        "parameterGroups": [],
        "label": "Multi-state switch",
        "itemType": "Switch",
        "kind": "STATE",
        "tags": [],
        "UID": "mqtt:EnumSwitch",
        "advanced": false
    },
    {
        "parameters": [
            {
                "description": "An MQTT topic that this thing will subscribe to, to receive the state.",
                "label": "MQTT state topic",
                "name": "stateTopic",
                "required": true,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "Any supported transformation can be used. An example for a received JSON from a MQTT state topic would be a pattern of JSONPATH:$.device.status.temperature for a json {device: {status: { temperature: 23.2 }}}.",
                "label": "Transformation pattern",
                "name": "transformationPattern",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "0",
                "description": "A number (like 1, 10) or a string (like \"open\") that is recognised as on state.",
                "label": "Open value",
                "name": "open",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "1",
                "description": "A number (like 0, -10) or a string (like \"close\") that is recognised as off state.",
                "label": "Close value",
                "name": "close",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            }
        ],
        "parameterGroups": [],
        "label": "Open/Close contact",
        "itemType": "Contact",
        "kind": "STATE",
        "tags": [],
        "UID": "mqtt:Contact",
        "advanced": false
    },
    {
        "parameters": [
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will subscribe to, to receive the state. This can be left empty, the thing will be state-less then.",
                "label": "MQTT state topic",
                "name": "stateTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "An MQTT topic that this thing will send a command to. This can be left empty",
                "label": "MQTT command topic",
                "name": "commandTopic",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": false,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "",
                "description": "Any supported transformation can be used. An example for a received JSON from a MQTT state topic would be a pattern of JSONPATH:$.device.status.temperature for a json {device: {status: { temperature: 23.2 }}}.",
                "label": "Transformation pattern",
                "name": "transformationPattern",
                "required": false,
                "type": "TEXT",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            },
            {
                "defaultValue": "false",
                "description": "The channel will send updates as RGB values and expects RGB values from the state topic.",
                "label": "RGB instead of HSV",
                "name": "rgb",
                "required": false,
                "type": "BOOLEAN",
                "readOnly": false,
                "multiple": false,
                "advanced": true,
                "verify": false,
                "limitToOptions": true,
                "options": [],
                "filterCriteria": []
            }
        ],
        "parameterGroups": [],
        "description": "",
        "label": "Color value",
        "itemType": "Color",
        "kind": "STATE",
        "tags": [],
        "UID": "mqtt:Color",
        "advanced": false
    }
]